# -*- coding: utf-8 -*-
"""KNN_Movie_Success_Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AH0TgZMqNKk2bs_GtWlUL3Per7_PO65r
"""

# INSE 6180 Security and Privacy Implications of Data Mining
# Group #17 Hit or Flop: Movie Success Prediction Using Data Mining Techniques
# KNN IMPLEMENTATION 2019 FALL
import pandas as pd
import numpy as np
import sklearn
from sklearn.model_selection import train_test_split
import random
import math
from sklearn.metrics import confusion_matrix,classification_report

def ecluidean_distance(X, y):
  '''
  Calculating the Euclidean Distance wherer input is the X(training Data), y(Target Data)
  '''
  distance = 0
  for i in range(0, len(X)):
    distance = distance + (X[i] - y[i])**2
  distance = math.sqrt(distance)
  return distance

def KNN_prediction(test_data, train_data, k):
 '''
 This function inputs the test_data and train_data, and the value of k which si fed to the KNN algorithm 
 to calculate the predictions pred.
 '''
  pred = []
  print(train_data.shape)
  print(test_data.shape)
  for i in range(0, test_data.shape[0]):
    euc_distance = []
    euc_class = []
    hit = 0
    flop = 0
    for j in range(0, train_data.shape[0]):
      euc_distance.append(ecluidean_distance(test_data.iloc[i,], train_data.iloc[j,]))
      euc_class.append(train_data.iloc[j, 7])

    d = {"euc_class":euc_class, "euc_distance":euc_distance}
    eu = pd.DataFrame(d)
    eu = eu.sort_values(by=["euc_distance"])
    eu = eu.iloc[0:k, :]
    for i in range(0, eu.shape[0]):
      if((eu.iloc[i, 0]) == 1):
        hit = hit + 1
      else:
        flop += 1
    
    if hit > flop:
      pred.append(1)
    else:
      pred.append(0)
    
    
  return pred

print("Running Movie Success using KNN Algorithm\n")
url = "movies.csv"
dataset = pd.read_csv(url)
x = pd.DataFrame(dataset,columns=['budget','genres','original_language','popularity','revenue','vote_average','vote_count'])
x['genres'] = pd.Categorical(x['genres']).codes
x['original_language'] = pd.Categorical(x['original_language']).codes
x.dropna()
y = dataset.iloc[:,20:21]
y['Verdict'] = pd.Categorical(y['Verdict']).codes
x_data  = x.values
y_data = y.values

y_data = y_data.reshape(-1)
#print(y)
X_train, X_test, y_train, y_test = sklearn.model_selection.train_test_split(x, y, test_size=0.05, random_state=0)
X_train = pd.concat([X_train,y_train],axis=1)

#Xtrain_test_split(x, y, test_size)
pred = KNN_prediction(X_test, X_train, 5)

# Printing the confusion Matrix of the Predictions
print("Confusion Matrix:")
print(confusion_matrix(y_test,pred))
print(classification_report(y_test,pred))